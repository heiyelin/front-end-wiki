(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{273:function(t,v,s){"use strict";s.r(v);var a=s(2),_=Object(a.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"作用域与闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域与闭包"}},[t._v("#")]),t._v(" 作用域与闭包")]),t._v(" "),s("h2",{attrs:{id:"一、作用域与作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、作用域与作用域链"}},[t._v("#")]),t._v(" 一、作用域与作用域链")]),t._v(" "),s("h3",{attrs:{id:"_1-作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-作用域"}},[t._v("#")]),t._v(" 1. 作用域")]),t._v(" "),s("p",[t._v("作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("在 ES6 规范中，作用域概念变为词法环境概念。")])]),t._v(" "),s("p",[t._v("词法环境：\n在 "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-lexical-environments",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 规范"),s("OutboundLink")],1),t._v("中，词法环境（LexicalEnvironment）是一个用于定义特定变量和函数标识符在 ECMAScript 代码的词法嵌套结构上关联关系的规范类型。一个词法环境由一个环境记录项（Environment Record）和可能为空的外部词法环境引用（outer Lexical Environment）构成。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[[LexicalEnvironment]] = {\n  [[Environment Record]],\n  [[Outer Lexical Environment]]\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("词法环境分了三类：")]),t._v(" "),s("ul",[s("li",[t._v("全局环境（global environment）： 全局环境是一个没有外部环境的词法环境。全局环境外部环境引用为 "),s("code",[t._v("null")]),t._v("。全局环境的 EnvironmentRecord（环境记录）可以绑定变量，并关联对应的全局对象。")]),t._v(" "),s("li",[t._v("模块环境（module environment）： 模块环境也是一个词法环境，它包含模块顶级声明的绑定。它还包含模块显式导入的绑定。模块环境的外部环境是全局环境。")]),t._v(" "),s("li",[t._v("函数环境（function environment）： 函数环境也是一个词法环境，对应于 ECMAScript 函数对象的调用。函数环境可以建立新的此绑定。函数环境还支持 super 调用所需的状态。")])]),t._v(" "),s("p",[t._v("环境记录项（Environment Record）分为 5 类：")]),t._v(" "),s("ul",[s("li",[t._v("声明式环境记录项（Declarative Environment Records）： 用于绑定作用域内定义的一系列标识符。例如变量，常量，"),s("code",[t._v("let")]),t._v("，"),s("code",[t._v("class")]),t._v("，"),s("code",[t._v("module")]),t._v("，"),s("code",[t._v("import")]),t._v(" 以及函数声明等。")]),t._v(" "),s("li",[t._v("对象式环境记录项（Object Environment Records）： 每一个对象式环境记录项都有一个关联的对象，这个对象被称作绑定对象 。对象式环境记录项直接将一系列标识符与其绑定对象的属性名称建立一一对应关系。")]),t._v(" "),s("li",[t._v("函数环境记录项（Function Environment Records）")]),t._v(" "),s("li",[t._v("全局环境记录项（Global Environment Records）")]),t._v(" "),s("li",[t._v("模块环境记录项（Module Environment Records）")])]),t._v(" "),s("h3",{attrs:{id:"_2-作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-作用域链"}},[t._v("#")]),t._v(" 2. 作用域链")]),t._v(" "),s("ul",[s("li",[t._v("全局环境的外部词法环境引用为 "),s("code",[t._v("null")]),t._v("。")]),t._v(" "),s("li",[t._v("一个词法环境可以作为多个词法环境的外部环境。例如全局声明了多个函数，则这些函数词法环境的外部词法环境引用都指向全局环境。")])]),t._v(" "),s("p",[s("strong",[t._v("当代码试图访问一个变量时 —— 它首先会在内部词法环境中进行搜索，然后是外部环境，然后是更外部的环境，直到（词法环境）链的末尾。")])]),t._v(" "),s("p",[t._v("外部词法环境的引用将一个词法环境和其外部词法环境链接起来，外部词法环境又拥有对其自身的外部词法环境的引用。这样就形成一个链式结构，这里我们称其为环境链（即 ES6 之前的作用域链），全局环境是这条链的顶端。")]),t._v(" "),s("h2",{attrs:{id:"二、执行上下文与执行上下文栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、执行上下文与执行上下文栈"}},[t._v("#")]),t._v(" 二、执行上下文与执行上下文栈")]),t._v(" "),s("h3",{attrs:{id:"_1-执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-执行上下文"}},[t._v("#")]),t._v(" 1. 执行上下文")]),t._v(" "),s("p",[t._v("执行上下文也叫执行环境（Execution Context）, 执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。")]),t._v(" "),s("p",[t._v("对于每个执行上下文，都含有以下几个部分：")]),t._v(" "),s("ul",[s("li",[t._v("词法环境组件: 指定一个词法环境对象，用于解析该执行环境内的代码创建的标识符引用。")]),t._v(" "),s("li",[t._v("变量环境组件: 指定一个词法环境对象，其环境数据用于保存由该执行环境内的代码通过 VariableStatement 和 FunctionDeclaration 创建的绑定。")]),t._v(" "),s("li",[t._v("this 绑定： 指定该执行环境内的 ECMA 脚本代码中 this 关键字所关联的值。")])]),t._v(" "),s("h3",{attrs:{id:"_2-执行上下文的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行上下文的类型"}},[t._v("#")]),t._v(" 2. 执行上下文的类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全局执行上下文：这是默认的，最基础的上下文。它做了两件事，")]),t._v(" "),s("ul",[s("li",[t._v("创建一个全局对象，在浏览器中这个全局对象就是 window 对象；")]),t._v(" "),s("li",[t._v("将 this 指针指向这个全局对象。")])])]),t._v(" "),s("li",[s("p",[t._v("函数执行上下文：每次调用函数时，都会为该函数创建一个新的执行上下文。")])]),t._v(" "),s("li",[s("p",[t._v("eval 函数执行上下文：运行在 eval 函数中的代码也获得自己的执行上下文。")])])]),t._v(" "),s("h3",{attrs:{id:"_3-执行上下文的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行上下文的生命周期"}},[t._v("#")]),t._v(" 3. 执行上下文的生命周期")]),t._v(" "),s("p",[t._v("执行上下文的生命周期包含三个阶段：创建阶段->执行阶段->回收阶段")]),t._v(" "),s("ol",[s("li",[t._v("创建阶段：")])]),t._v(" "),s("p",[t._v("当函数被调用，但未执行任何其内部代码之前，会做一下三件事：")]),t._v(" "),s("ul",[s("li",[t._v("确定 this 的值")]),t._v(" "),s("li",[t._v("LexicalEnvironment （词法环境）组件被创建。")]),t._v(" "),s("li",[t._v("VariableEnvironment （变量环境）组件被创建。")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ExecutionContext = {\n  ThisBinding = <this value>,     // 确定this\n  LexicalEnvironment = { ... },   // 词法环境\n  VariableEnvironment = { ... },  // 变量环境\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("执行阶段")])]),t._v(" "),s("p",[t._v("执行变量赋值、代码执行。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("回收阶段")])]),t._v(" "),s("p",[t._v("执行上下文出栈等待虚拟机回收。")]),t._v(" "),s("h3",{attrs:{id:"_4-执行上下文栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-执行上下文栈"}},[t._v("#")]),t._v(" 4. 执行上下文栈")]),t._v(" "),s("p",[t._v("执行上下文栈其实是一个先进后出的栈结构，被用来存储代码运行时创建的所有执行上下文。")]),t._v(" "),s("p",[t._v("当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。")]),t._v(" "),s("p",[t._v("引擎会执行那些执行上下文位于栈顶的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。")]),t._v(" "),s("h2",{attrs:{id:"三、this-的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、this-的原理"}},[t._v("#")]),t._v(" 三、this 的原理")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("this")]),t._v("：当前执行代码的环境对象。")])]),t._v(" "),s("p",[t._v("在绝大多数情况下，函数的调用方式决定了 "),s("code",[t._v("this")]),t._v(" 的值。")]),t._v(" "),s("p",[s("code",[t._v("this")]),t._v(" 不能在执行期间被赋值，并且在每次函数被调用时"),s("code",[t._v("this")]),t._v("的值也可能会不同。")]),t._v(" "),s("p",[t._v("ES5 引入了 "),s("code",[t._v("bind")]),t._v(" 方法来设置函数的 "),s("code",[t._v("this")]),t._v(" 值，而不用考虑函数如何被调用的，ES2015 引入了支持 "),s("code",[t._v("this")]),t._v(" 词法解析的箭头函数（它在闭合的执行环境内设置 "),s("code",[t._v("this")]),t._v(" 的值）。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("场景")])]),t._v(" "),s("p",[t._v("a. 全局环境：无论是否是在严格模式下，在全局执行环境中，"),s("code",[t._v("this")]),t._v(" 都指向全局对象。")]),t._v(" "),s("p",[t._v("b. 函数（运行时）环境：在函数内部，"),s("code",[t._v("this")]),t._v(" 的取值取决于函数被调用的方式。")]),t._v(" "),s("ul",[s("li",[t._v("简单调用：在严格模式下为 "),s("code",[t._v("undefined")]),t._v("，非严格模式下指向全局对象。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window or undefined")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ul",[s("li",[s("code",[t._v("call/apply")]),t._v("：指向绑定到调用中的特定对象。")]),t._v(" "),s("li",[s("code",[t._v("bind")]),t._v("方法："),s("code",[t._v("bind")]),t._v(" 方法会创建一个与原函数具有相同函数体和作用域的函数。"),s("code",[t._v("this")]),t._v(" 指向绑定的对象。")]),t._v(" "),s("li",[t._v("箭头函数：没有 "),s("code",[t._v("this")]),t._v("，如果访问 "),s("code",[t._v("this")]),t._v("，则从外部环境获取。")]),t._v(" "),s("li",[t._v("作为对象的方法："),s("code",[t._v("this")]),t._v(" 指向调用该函数的对象。")]),t._v(" "),s("li",[t._v("作为构造函数："),s("code",[t._v("this")]),t._v(" 指向被构造的实例对象。")]),t._v(" "),s("li",[t._v("作为 DOM 事件处理函数："),s("code",[t._v("this")]),t._v(" 指向触发事件的 DOM 元素。")])]),t._v(" "),s("h2",{attrs:{id:"闭包与实际的运用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包与实际的运用场景"}},[t._v("#")]),t._v(" 闭包与实际的运用场景")]),t._v(" "),s("blockquote",[s("p",[t._v("函数保存其外部的变量并且能够访问它们称之为闭包。")])]),t._v(" "),s("blockquote",[s("p",[t._v('在某些语言中，是没有闭包的，或是以一种特别方式来实现。\n但正如上面所说的，在 JavaScript 中函数都是天生的闭包（只有一个例外，请参考 "newFunction" 语法）。\n也就是说，他们会通过隐藏的 '),s("code",[t._v("[[Environment]]")]),t._v(" 属性记住创建它们的位置，所以它们都可以访问外部变量。")])]),t._v(" "),s("h3",{attrs:{id:"_1-闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-闭包"}},[t._v("#")]),t._v(" 1. 闭包")]),t._v(" "),s("p",[t._v("在我看来，函数与其外部词法环境的引用就构成"),s("strong",[t._v("闭包")]),t._v("。")]),t._v(" "),s("p",[t._v("闭包的核心是"),s("strong",[t._v("词法环境")]),t._v("，词法环境由环境记录项和可能为空的外部词法环境引用构成。")]),t._v(" "),s("p",[t._v("在执行环境创建的时候，就生成了类似环境链的数据结构，词法环境是彼此独立的，当前执行环境访问变量时，首先会先从当前词法环境里查找，没找到继续沿着外部词法作用域查找，直到词法环境链的末尾。")]),t._v(" "),s("h3",{attrs:{id:"_2-实际运用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实际运用"}},[t._v("#")]),t._v(" 2. 实际运用")]),t._v(" "),s("ul",[s("li",[t._v("模拟私有方法")]),t._v(" "),s("li",[t._v("存储变量")]),t._v(" "),s("li",[t._v("循环中的闭包")])])])}),[],!1,null,null,null);v.default=_.exports}}]);